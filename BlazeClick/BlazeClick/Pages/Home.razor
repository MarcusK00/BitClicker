@page "/"
@using BlazeClick.Models
@using System.Text
@implements IDisposable

<PageTitle>Home</PageTitle>

<div class="center-container">
    <h1 class="title">Bit Miner</h1>
    <h4 class="bit-numbers">@binaryString</h4>
    <h3 class="click-count">Current Bits: @logic.BitCount</h3>
    <button class="click-button" @onclick="BtnClick">Mine</button>
</div>

<div class="shop-container">
    @foreach (var item in logic.ShopItems.Values)
    {
        <button class="shop-btn @(item.Name.ToLower().Replace(" ", "-"))
                           @(logic.BitCount < item.CurrentCost ? "shop-btn-locked" : "shop-btn-unlocked")"
                @onclick="() => BuyItem(item.Type)"
                disabled="@(logic.BitCount < item.CurrentCost)">
            @item.Name<br />
            <span class="shop-cost">@item.CurrentCost bits</span><br />
            <span>Owned: @item.Owned</span>
        </button>
    }
</div>

@code {
    private GameLogic logic = new();
    private string binaryString;
    private int bitInt;

    private void BtnClick()
    {
        logic.Click();

        binaryString = ConvertToBinary();

    }

    public void BuyItem(ShopItemType type)
    {
        logic.BuyItem(type);
    }

    private RepeatingTimer? _timer;

    protected override void OnInitialized()
    {
        // execute every second
        _timer = new RepeatingTimer(async () =>
        {
            logic.AutoMineTick();
            binaryString = ConvertToBinary();

            await InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    public string ConvertToBinary()
    {
        int temp = logic.BitCount;
        Console.WriteLine($"Temp: { temp}");
        StringBuilder binaryBuilder = new StringBuilder();
        try
        {
            do
            {
                bitInt = temp % 2;
                Console.WriteLine($"BitInt: {bitInt}");
                temp /= 2;
                Console.WriteLine($"Temp: {temp}");
                binaryBuilder.Append(bitInt.ToString());
                Console.WriteLine($"Bitstring: {binaryBuilder.ToString()}");
            } while (temp > 0);
        } catch(Exception ex){ Console.WriteLine(ex.Message); }

        StringBuilder reversedBuilder = new StringBuilder();
        for (int i = binaryBuilder.Length-1; i >= 0; i--)
        {
            reversedBuilder.Append(binaryBuilder[i]);
        }
        return reversedBuilder.ToString();

    }

}